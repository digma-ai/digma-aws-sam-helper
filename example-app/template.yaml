AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: >
  AWS SAM Template for running Java Spring PetClinic app on Fargate with VPC and subnets creation.

Parameters:
  DigmaCollectorUrl:
    Type: String

Resources:
  # VPC
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: '10.0.0.0/16'
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: 'Name'
          Value: 'PetClinicVPC'

  # Internet Gateway
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: 'Name'
          Value: 'PetClinicInternetGateway'

  # Attach Internet Gateway to VPC
  VPCGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # Public Subnet 1
  PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: '10.0.1.0/24'
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [0, !GetAZs '']

  # Public Subnet 2
  PublicSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: '10.0.2.0/24'
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [1, !GetAZs '']

  # Route Table
  RouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: 'Name'
          Value: 'PetClinicRouteTable'

  # Route
  Route:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway

  # Subnet Route Table Association for Public Subnet 1
  SubnetRouteTableAssociation1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref RouteTable

  # Subnet Route Table Association for Public Subnet 2
  SubnetRouteTableAssociation2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref RouteTable

  # IAM Role for ECS Task Execution
  TaskExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'ecs-tasks.amazonaws.com'
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: 'ecsTaskExecutionPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'ecr:GetDownloadUrlForLayer'
                  - 'ecr:BatchGetImage'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                  - 'logs:CreateLogGroup'
                  - 'logs:DescribeLogStreams'
                Resource: '*'

# Amazon EFS File System
  OtlpEFSFileSystem:
    Type: AWS::EFS::FileSystem
    Properties:
      FileSystemTags:
        - Key: Name
          Value: OtlpEFSFileSystem

  # EFS Mount Target (example for one subnet)
  OtlpEFSMountTarget1:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref OtlpEFSFileSystem
      SubnetId: !Ref PublicSubnet1
      SecurityGroups: 
        - !Ref ECSSecurityGroup  

  OtlpEFSMountTarget2:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref OtlpEFSFileSystem
      SubnetId: !Ref PublicSubnet2
      SecurityGroups: 
        - !Ref ECSSecurityGroup

  # ECS Cluster
  ECSCluster:
    Type: 'AWS::ECS::Cluster'

  # ECS Task Definition
  ECSTaskDefinition:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      RequiresCompatibilities:
        - 'FARGATE'
      Cpu: '512'
      Memory: '1024'
      NetworkMode: 'awsvpc'
      ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn
      ContainerDefinitions:

        - Name: 'spring-petclinic'
          Image: 'springio/petclinic:latest'
          PortMappings:
            - ContainerPort: 8080
          Essential: true
          DependsOn:
            - ContainerName: java-agent-initializer
              Condition: SUCCESS
          Environment:
            - Name: JAVA_TOOL_OPTIONS 
              Value: !Sub >-
                -javaagent:/shared-vol/dig-agent.jar 
                -javaagent:/shared-vol/otel-agent.jar 
                -Dotel.javaagent.extensions=/shared-vol/dig-ext.jar 
                -Dotel.exporter.otlp.traces.endpoint=${DigmaCollectorUrl}
                -Dotel.traces.exporter=otlp 
                -Dotel.metrics.exporter=none 
                -Dotel.logs.exporter=none 
                -Dotel.exporter.otlp.protocol=grpc 
                -Dotel.instrumentation.common.experimental.controller.telemetry.enabled=true 
                -Dotel.instrumentation.common.experimental.view.telemetry.enabled=true 
                -Dotel.instrumentation.experimental.span-suppression-strategy=none 
                -Dotel.instrumentation.jdbc-datasource.enabled=true
                -Dotel.instrumentation.digma-methods.enabled=false
            - Name: OTEL_SERVICE_NAME
              Value: pet-clinic
            - Name: OTEL_RESOURCE_ATTRIBUTES
              Value: digma.environment=PETCLINIC,digma.environment.type=Public
            # - Name: DIGMA_AUTOINSTRUMENT_PACKAGES
            #   Value: org.springframework

          LogConfiguration:
            LogDriver: 'awslogs'
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: 'ecs'
          MountPoints:
            - ContainerPath: /shared-vol
              SourceVolume: otlp-volume

        - Name: java-agent-initializer
          Image: digmaai/java-agent-initializer:0.0.3
          Essential: false
          LogConfiguration:
            LogDriver: 'awslogs'
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: 'ecs'
          MountPoints:
            - ContainerPath: /shared-vol
              SourceVolume: otlp-volume
      Volumes:
        - Name: otlp-volume
          EFSVolumeConfiguration:
            FilesystemId: !Ref OtlpEFSFileSystem

  # ECS Service
  ECSService:
    Type: 'AWS::ECS::Service'
    Properties:
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref ECSTaskDefinition
      DesiredCount: 1
      LaunchType: 'FARGATE'
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: 'ENABLED'
          Subnets:
            - !Ref PublicSubnet1
            - !Ref PublicSubnet2
          SecurityGroups:
            - !Ref ECSSecurityGroup

  # Security Group for ECS
  ECSSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Security group for ECS Fargate service'
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: 'tcp'
          FromPort: 8080
          ToPort: 8080
          CidrIp: '0.0.0.0/0'
        - IpProtocol: 'tcp'
          FromPort: 2049
          ToPort: 2049
          CidrIp: '0.0.0.0/0'

  # CloudWatch Log Group
  LogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: '/ecs/spring-petclinic'
      RetentionInDays: 7

# Outputs:
#   ServiceURL:
#     Description: 'URL of the running PetClinic application'
#     Value: !Join ['', ['http://', !GetAtt ECSService.loadBalancer.DNSName]]
